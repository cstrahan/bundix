#! /usr/bin/env ruby

require 'optparse'
require 'tmpdir'
require 'pathname'

require_relative '../lib/bundix/version'

class Bundix
  OPTIONS = {
    ruby: 'ruby',
    bundle_pack_path: 'vendor/bundle',
    gemfile: 'Gemfile',
    lockfile: 'Gemfile.lock',
    gemset: 'gemset.nix',
    lock: false,
    cache: false,
    groups: []
  }

  op = OptionParser.new do |o|
    o.on '--ruby=ruby', 'ruby version to use for init, defaults to latest' do |value|
      OPTIONS[:ruby] = value
    end

    o.on '-i', '--init', "initialize a new shell.nix for nix-shell (won't overwrite old ones)" do
      OPTIONS[:init] = true
    end

    o.on '--gemset=gemset.nix', 'path to the gemset.nix' do |value|
      OPTIONS[:gemset] = File.expand_path(value)
    end

    o.on '--gemfile=Gemfile', 'path to the Gemfile' do |value|
      OPTIONS[:gemfile] = File.expand_path(value)
    end

    o.on '--lockfile=Gemfile.lock', 'path to the Gemfile.lock' do |value|
      OPTIONS[:lockfile] = File.expand_path(value)
    end

    o.on '-l', '--lock', 'create Gemfile.lock for given groups' do |groups|
      OPTIONS[:lock] = true
    end

    o.on '-c', '--cache', 'resolve dependencies from cache' do
      OPTIONS[:cache] = true
    end

    o.on '-g', '--groups [GROUP1,GROUP2]', Array, 'only use these groups for the lockfile' do |groups|
      OPTIONS[:groups].concat groups.map(&:to_sym)
    end

    o.on '-q', '--quiet', 'only output errors' do
      OPTIONS[:quiet] = true
    end

    o.on '-v', '--version', 'show the version of bundix' do
      puts Bundix::VERSION
      exit
    end
  end

  op.parse!
  $VERBOSE = !OPTIONS[:quiet]

  require_relative '../lib/bundix'

  if OPTIONS[:init]
    if File.file?('shell.nix')
      warn "won't override existing shell.nix"
    else
      shell_nix = File.read(File.expand_path('../template/shell.nix', __dir__))
      shell_nix.gsub!('PROJECT', File.basename(Dir.pwd))
      shell_nix.gsub!('RUBY', OPTIONS[:ruby])
      shell_nix.gsub!('LOCKFILE', "./#{Pathname(OPTIONS[:lockfile]).relative_path_from(Pathname('./'))}")
      shell_nix.gsub!('GEMSET', "./#{Pathname(OPTIONS[:gemset]).relative_path_from(Pathname('./'))}")
      File.write('shell.nix', shell_nix)
    end
  end

  gemset = Bundix.new(OPTIONS).convert

  tempfile = Tempfile.new('gemset.nix', encoding: 'UTF-8')
  begin
    Bundix.object2nix(gemset, 2, tempfile)
    tempfile.flush
    FileUtils.cp(tempfile.path, OPTIONS[:gemset])
  ensure
    tempfile.close!
    tempfile.unlink
  end
end
